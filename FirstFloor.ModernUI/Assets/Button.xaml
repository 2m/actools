<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:a="clr-namespace:FirstFloor.ModernUI.Windows.Attached" xmlns:n="clr-namespace:FirstFloor.ModernUI.Windows.Navigation"
    xmlns:c="clr-namespace:FirstFloor.ModernUI.Windows.Controls">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="/FirstFloor.ModernUI;component/Assets/Converters.xaml" />
    <ResourceDictionary Source="/FirstFloor.ModernUI;component/Assets/Fonts.xaml" />
    <ResourceDictionary Source="/FirstFloor.ModernUI;component/Assets/Easing.xaml" />
    <ResourceDictionary Source="/FirstFloor.ModernUI;component/Assets/ModernProgressRing.Special.xaml" />
  </ResourceDictionary.MergedDictionaries>

  <Style x:Key="SystemButtonBase" TargetType="ButtonBase">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Border x:Name="Chrome" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Border Background="{TemplateBinding BorderBrush}">
              <ContentPresenter Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="True" />
            </Border>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="AlertButton" TargetType="ButtonBase" BasedOn="{StaticResource SystemButtonBase}">
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Margin" Value="8" />
    <Setter Property="Padding" Value="4" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Opacity" Value=".7" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Opacity" Value=".4" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="SystemButtonSquare" TargetType="ButtonBase" BasedOn="{StaticResource SystemButtonBase}">
    <Setter Property="Width" Value="45" />
    <Setter Property="Height" Value="29" />
    <Setter Property="Foreground" Value="{DynamicResource ButtonText}" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetProperty="Background.Opacity" To="1" Duration="0:0:0.12" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard FillBehavior="Stop">
              <DoubleAnimation Storyboard.TargetProperty="Background.Opacity" To="0" Duration="0:0:0.12" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetProperty="BorderBrush.Opacity" To="1" Duration="0:0:0.12" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard FillBehavior="Stop">
              <DoubleAnimation Storyboard.TargetProperty="BorderBrush.Opacity" To="0" Duration="0:0:0.12" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource ButtonTextDisabled}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="SystemButton" TargetType="ButtonBase" BasedOn="{StaticResource SystemButtonSquare}">
    <Setter Property="Background">
      <Setter.Value>
        <SolidColorBrush Color="#24aaaaaa" Opacity="0" />
      </Setter.Value>
    </Setter>
    <Setter Property="BorderBrush">
      <Setter.Value>
        <SolidColorBrush Color="#24aaaaaa" Opacity="0" />
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="SystemCloseButton" TargetType="ButtonBase" BasedOn="{StaticResource SystemButtonSquare}">
    <Setter Property="Background">
      <Setter.Value>
        <SolidColorBrush Color="#e81123" Opacity="0" />
      </Setter.Value>
    </Setter>
    <Setter Property="BorderBrush">
      <Setter.Value>
        <SolidColorBrush Color="#ba3943" Opacity="0" />
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType=c:DpiAwareWindow}}" Value="{x:Static WindowState.Normal}">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ButtonBase}">
              <c:Cell>
                <Border Margin="0 2 2 0" Background="Transparent" />
                <Border x:Name="Chrome" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" IsHitTestVisible="False">
                  <Border Background="{TemplateBinding BorderBrush}">
                    <ContentPresenter Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="True" />
                  </Border>
                </Border>
              </c:Cell>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="SystemButtonLink" TargetType="ButtonBase" BasedOn="{StaticResource SystemButtonBase}">
    <Setter Property="Foreground" Value="{DynamicResource LinkButtonText}" />
    <Setter Property="FontWeight" Value="{DynamicResource TitleLinksWeight}" />
    <Setter Property="Width" Value="NaN" />
    <Setter Property="Height" Value="NaN" />
    <Setter Property="FontFamily" Value="{StaticResource DefaultFont}" />
    <Setter Property="FontSize" Value="11" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Border x:Name="Chrome" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}"
              BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True">
            <ContentPresenter x:Name="Presenter" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                Content="{TemplateBinding Content, Converter={StaticResource ToUpperSpecialConverter}}" TextBlock.FontWeight="{TemplateBinding FontWeight}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource LinkButtonTextHover}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource LinkButtonTextPressed}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource LinkButtonTextDisabled}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="BaseButtonStyle.Control" TargetType="{x:Type Control}">
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Background" Value="{DynamicResource ButtonBackground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorder}" />
    <Setter Property="Foreground" Value="{DynamicResource ButtonText}" />
    <Setter Property="FontFamily" Value="{StaticResource DefaultFont}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="16 1 16 2" />
  </Style>

  <Style x:Key="BaseButtonStyle.Nothing" TargetType="{x:Type Button}">
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Border Background="{TemplateBinding Background}">
            <ContentPresenter x:Name="Presenter" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="TextBlock.Foreground" Value="{DynamicResource ButtonTextDisabled}" TargetName="Presenter" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="BaseButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource BaseButtonStyle.Control}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Border x:Name="Chrome" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
            <ContentPresenter x:Name="Presenter" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource ButtonTextDisabled}" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="{DynamicResource ButtonBackgroundHover}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderHover}" />
        <Setter Property="Foreground" Value="{DynamicResource ButtonTextHover}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Background" Value="{DynamicResource ButtonBackgroundPressed}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderPressed}" />
        <Setter Property="Foreground" Value="{DynamicResource ButtonTextPressed}" />
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter Property="Background" Value="{DynamicResource ButtonBackgroundPressed}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderPressed}" />
        <Setter Property="Foreground" Value="{DynamicResource ButtonTextPressed}" />
      </Trigger>
      <Trigger Property="IsFocused" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource FocusBorder}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="DeleteButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseButtonStyle}">
    <Setter Property="DockPanel.Dock" Value="Right" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Padding" Value="6 1 6 2" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Border x:Name="Chrome" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
            <DockPanel Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
              <Path x:Name="Icon" Data="M0,0 L7,7 M7,0 L0,7 Z" Width="8" Height="8" RenderOptions.EdgeMode="Aliased"
                  Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" VerticalAlignment="Center"
                  HorizontalAlignment="Center" StrokeThickness="1" Margin="6 5 0 3" />
              <ContentPresenter x:Name="Presenter" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="8 0 6 0" />
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Content" Value="{x:Null}">
              <Setter TargetName="Presenter" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="Icon" Property="Margin" Value="0 5 -1 3" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="Go.BaseButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource BaseButtonStyle}">
    <Setter Property="Background" Value="{DynamicResource GoButtonBackground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource GoButtonBorder}" />
    <Setter Property="Foreground" Value="{DynamicResource GoButtonText}" />
    <Setter Property="FontWeight" Value="Bold" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Border x:Name="Chrome" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
            <ContentPresenter x:Name="Presenter" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource GoButtonTextDisabled}" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="{DynamicResource GoButtonBackgroundHover}" />
        <Setter Property="BorderBrush" Value="{DynamicResource GoButtonBorderHover}" />
        <Setter Property="Foreground" Value="{DynamicResource GoButtonTextHover}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Background" Value="{DynamicResource GoButtonBackgroundPressed}" />
        <Setter Property="BorderBrush" Value="{DynamicResource GoButtonBorderPressed}" />
        <Setter Property="Foreground" Value="{DynamicResource GoButtonTextPressed}" />
      </Trigger>
      <Trigger Property="IsFocused" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource Go}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="Error.BaseButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource Go.BaseButtonStyle}">
    <Style.Resources>
      <SolidColorBrush x:Key="GoBrush" Color="{DynamicResource GoColor}" />
      <SolidColorBrush x:Key="ErrorBrush" Color="{DynamicResource ErrorColor}" />
    </Style.Resources>
    <Setter Property="a:Resources.Renames">
      <Setter.Value>
        <a:RenameEntries>
          <a:RenameEntry SourceKey="Error" Key="Go" />
        </a:RenameEntries>
      </Setter.Value>
    </Setter>
    <Setter Property="a:Resources.Replaces">
      <Setter.Value>
        <a:ReplaceEntries>
          <a:ReplaceEntry TargetKey="GoButtonBackground" PatternKey="GoBrush" ReplacementKey="ErrorBrush" />
          <a:ReplaceEntry TargetKey="GoButtonBackgroundHover" PatternKey="GoBrush" ReplacementKey="ErrorBrush" />
          <a:ReplaceEntry TargetKey="GoButtonBackgroundPressed" PatternKey="GoBrush" ReplacementKey="ErrorBrush" />
          <a:ReplaceEntry TargetKey="GoButtonBorder" PatternKey="GoBrush" ReplacementKey="ErrorBrush" />
          <a:ReplaceEntry TargetKey="GoButtonBorderHover" PatternKey="GoBrush" ReplacementKey="ErrorBrush" />
          <a:ReplaceEntry TargetKey="GoButtonBorderPressed" PatternKey="GoBrush" ReplacementKey="ErrorBrush" />
          <a:ReplaceEntry TargetKey="GoButtonText" PatternKey="GoBrush" ReplacementKey="ErrorBrush" />
          <a:ReplaceEntry TargetKey="GoButtonTextHover" PatternKey="GoBrush" ReplacementKey="ErrorBrush" />
          <a:ReplaceEntry TargetKey="GoButtonTextPressed" PatternKey="GoBrush" ReplacementKey="ErrorBrush" />
          <a:ReplaceEntry TargetKey="GoButtonTextDisabled" PatternKey="GoBrush" ReplacementKey="ErrorBrush" />
        </a:ReplaceEntries>
      </Setter.Value>
    </Setter>
    <Setter Property="FontWeight" Value="Normal" />
  </Style>

  <Style x:Key="{x:Type ToggleButton}" BasedOn="{StaticResource BaseButtonStyle}" TargetType="{x:Type ToggleButton}" />

  <Style x:Key="{x:Type RepeatButton}" BasedOn="{StaticResource BaseButtonStyle}" TargetType="{x:Type RepeatButton}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
  </Style>

  <Style x:Key="{x:Type Button}" BasedOn="{StaticResource BaseButtonStyle}" TargetType="{x:Type Button}" />

  <Style x:Key="Go.Button" BasedOn="{StaticResource Go.BaseButtonStyle}" TargetType="{x:Type Button}">
    <Setter Property="FontSize" Value="16" />
    <Setter Property="TextOptions.TextFormattingMode" Value="{DynamicResource FormattingMode}" />
  </Style>

  <Style x:Key="Error.Button" BasedOn="{StaticResource Error.BaseButtonStyle}" TargetType="{x:Type Button}">
    <Setter Property="TextOptions.TextFormattingMode" Value="{DynamicResource FormattingMode}" />
  </Style>

  <Style x:Key="WrapperButton" TargetType="{x:Type Button}">
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Foreground" Value="{DynamicResource ButtonText}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <ContentPresenter RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="MoreDetailsSuperscript" TargetType="Button">
    <Setter Property="Command" Value="{x:Static n:LinkCommands.NavigateLinkMainWindow}" />
    <Setter Property="Content" Value="?" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <TextBlock x:Name="PART_Text" Margin="-20 -4 -10 -4" Padding="20 0 10 0" Foreground="{DynamicResource Hyperlink}" Background="Transparent">
            <Run Text="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Typography.Variants="Superscript" FontSize="12"
                BaselineAlignment="Superscript" FontWeight="Bold" />
          </TextBlock>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="PART_Text" Property="Foreground" Value="{DynamicResource HyperlinkHover}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="PART_Text" Property="Foreground" Value="{DynamicResource HyperlinkDisabled}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
              <Setter TargetName="PART_Text" Property="Cursor" Value="Hand" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>