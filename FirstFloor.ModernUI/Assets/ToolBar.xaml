<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:controls="clr-namespace:FirstFloor.ModernUI.Windows.Controls">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/FirstFloor.ModernUI;component/Assets/ButtonWithComboBox.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="ToolBarButtonBaseStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource ButtonText}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="8 3 8 5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="Chrome" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="Presenter" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource ButtonTextDisabled}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonBackgroundHover}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderHover}" />
                            <Setter Property="Foreground" Value="{DynamicResource ButtonTextHover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonBackgroundPressed}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderPressed}" />
                            <Setter Property="Foreground" Value="{DynamicResource ButtonTextPressed}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Chrome" Property="BorderBrush" Value="{DynamicResource Accent}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Go.ToolBarButton" BasedOn="{StaticResource Go.BaseButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
    </Style>

    <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" BasedOn="{StaticResource ToolBarButtonBaseStyle}" TargetType="{x:Type Button}" />
    <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" BasedOn="{StaticResource ToolBarButtonBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{DynamicResource ButtonBackgroundPressed}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderPressed}" />
                <Setter Property="Foreground" Value="{DynamicResource ButtonTextPressed}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" BasedOn="{StaticResource ToolBarButtonBaseStyle}" TargetType="{x:Type CheckBox}">
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{DynamicResource ButtonBackgroundPressed}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderPressed}" />
                <Setter Property="Foreground" Value="{DynamicResource ButtonTextPressed}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" BasedOn="{StaticResource ToolBarButtonBaseStyle}" TargetType="{x:Type RadioButton}">
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{DynamicResource ButtonBackgroundPressed}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderPressed}" />
                <Setter Property="Foreground" Value="{DynamicResource ButtonTextPressed}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static ToolBar.MenuStyleKey}" TargetType="{x:Type Menu}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}" />
        <Setter Property="TextOptions.TextFormattingMode" Value="{DynamicResource FormattingMode}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{DynamicResource WindowBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource ButtonText}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="8 3 8 5" />
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Resources>
            <Style x:Key="Disabled" TargetType="{x:Type MenuItem}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="SnapsToDevicePixels" Value="True" />

                <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
                <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}" />
                <Setter Property="TextOptions.TextFormattingMode" Value="{DynamicResource FormattingMode}" />
                <Setter Property="Background" Value="{DynamicResource WindowBackground}" />
                <Setter Property="BorderBrush" Value="{DynamicResource WindowBorder}" />
                <Setter Property="Foreground" Value="{DynamicResource ButtonText}" />

                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Padding" Value="0 6 0 6" />
                <Setter Property="MinWidth" Value="150" />
                <Setter Property="Grid.IsSharedSizeScope" Value="True" />
                <Setter Property="ScrollViewer.PanningMode" Value="Both" />
                <Setter Property="Stylus.IsFlicksEnabled" Value="False" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup" />
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                                        <ColumnDefinition x:Name="Col3" Width="14" />
                                    </Grid.ColumnDefinitions>

                                    <!-- ContentPresenter to show an Icon if needed -->
                                    <ContentPresenter Grid.Column="0" Margin="4 0 6 0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon" />

                                    <!-- Glyph is a checkmark if needed for a checkable menu -->
                                    <Grid Grid.Column="0" Visibility="Hidden" Margin="4 0 6 0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                        <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}"
                                                Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight" />
                                    </Grid>

                                    <!-- Content for the menu text etc -->
                                    <ContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" x:Name="HeaderHost" RecognizesAccessKey="True"
                                            ContentSource="Header" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                                    <!-- Content for the menu IGT -->
                                    <ContentPresenter Grid.Column="2" Margin="8 1 8 1" x:Name="IGTHost" ContentSource="InputGestureText"
                                            VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                                    <!-- Arrow drawn path which points to the next level of the menu -->
                                    <Grid Grid.Column="3" Margin="4 0 6 0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                        <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}"
                                                Data="M0,0 L0,8 L4,4 z" />
                                    </Grid>

                                    <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                                    <Popup IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right"
                                            x:Name="SubMenuPopup" Focusable="False"
                                            PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                        <Border x:Name="SubMenuBorder" BorderBrush="{TemplateBinding BorderBrush}"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" BorderThickness="1" Padding="2 2 2 2">
                                            <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                                <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                            </Grid>
                                        </Border>
                                    </Popup>
                                </Grid>
                            </Border>

                            <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                            <ControlTemplate.Triggers>
                                <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                                <Trigger Property="Role" Value="TopLevelHeader">
                                    <Setter Property="Padding" Value="6 1 6 1" />
                                    <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup" />
                                    <Setter Property="MinWidth" Value="0" />
                                    <Setter Property="Width" Value="Auto" TargetName="Col3" />
                                    <Setter Property="Background" Value="Yellow" />
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="Icon" />
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel" />
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost" />
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel" />
                                </Trigger>

                                <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                                <Trigger Property="Role" Value="TopLevelItem">
                                    <Setter Property="Padding" Value="6 1 6 1" />
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel" />
                                </Trigger>

                                <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                                <Trigger Property="Role" Value="SubmenuHeader">
                                    <Setter Property="DockPanel.Dock" Value="Top" />
                                    <Setter Property="Padding" Value="0 2 0 2" />
                                </Trigger>

                                <!-- Role = SubMenuItem : this is a child menu item which has children-->
                                <Trigger Property="Role" Value="SubmenuItem">
                                    <Setter Property="DockPanel.Dock" Value="Top" />
                                    <Setter Property="Padding" Value="0 2 0 2" />
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel" />
                                </Trigger>
                                <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                                    <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup" />
                                </Trigger>

                                <!-- If no Icon is present the we collapse the Icon Content -->
                                <Trigger Property="Icon" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="Icon" />
                                </Trigger>

                                <!-- The GlyphPanel contains the CheckMark -->
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel" />
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="Icon" />
                                </Trigger>

                                <!-- Using the system colors for the Menu Highlight and IsEnabled-->
                                <Trigger Property="IsHighlighted" Value="True">
                                    <Setter Property="Background" Value="LightGray" TargetName="Border" />
                                    <Setter Property="Foreground" Value="Black" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="LightGray" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="{x:Static ToolBar.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource SeparatorBackground}" />
    </Style>

    <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="True" />
    </Style>

    <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Cursor" Value="SizeAll" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent" SnapsToDevicePixels="True">
                        <Rectangle Margin="0 3 0 4">
                            <Rectangle.Fill>
                                <DrawingBrush Viewport="0 0 4 4" ViewportUnits="Absolute" Viewbox="0 0 8 8" ViewboxUnits="Absolute" TileMode="Tile">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <GeometryDrawing Brush="{DynamicResource SeparatorBackground}" Geometry="M 4 4 L 4 8 L 8 8 L 8 4 z" />
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolBarOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource ButtonText}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Visibility" Value="Visible" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Chrome" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                        <Grid>
                            <Path x:Name="Arrow" Fill="{TemplateBinding Foreground}" VerticalAlignment="Bottom" Margin="2,3" Data="M -0.5 3 L 5.5 3 L 2.5 6 Z" />
                            <ContentPresenter />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource ButtonTextDisabled}" />
                            <Setter Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonBackgroundHover}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderHover}" />
                            <Setter Property="Foreground" Value="{DynamicResource ButtonTextHover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonBackgroundPressed}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderPressed}" />
                            <Setter Property="Foreground" Value="{DynamicResource ButtonTextPressed}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Chrome" Property="BorderBrush" Value="{DynamicResource Accent}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ToolBar}" TargetType="{x:Type ToolBar}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <DockPanel Background="{DynamicResource WindowBackground}">
                        <ToggleButton DockPanel.Dock="Right" IsEnabled="{TemplateBinding HasOverflowItems}" Style="{StaticResource ToolBarOverflowButtonStyle}"
                                ClickMode="Press" IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                            <Popup x:Name="OverflowPopup" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" Focusable="False"
                                    PopupAnimation="Slide" IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                <Border x:Name="DropDownBorder" BorderThickness="1" BorderBrush="{DynamicResource WindowBorderActive}"
                                        Background="{DynamicResource WindowBackground}">
                                    <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" Margin="2" WrapWidth="200" Focusable="True"
                                            FocusVisualStyle="{x:Null}" KeyboardNavigation.TabNavigation="Cycle"
                                            KeyboardNavigation.DirectionalNavigation="Cycle" />
                                </Border>
                            </Popup>
                        </ToggleButton>

                        <Thumb x:Name="ToolBarThumb" Style="{StaticResource ToolBarThumbStyle}" Width="10" />
                        <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="True" Margin="0" />
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflowOpen" Value="True">
                            <Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="True">
                            <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Resources>
            <Style TargetType="{x:Type controls:ModernButton}">
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Foreground" Value="{DynamicResource ButtonText}" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="IconWidth" Value="24" />
                <Setter Property="IconHeight" Value="24" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Padding" Value="8 3 8 5" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="controls:ModernButton">
                            <Border x:Name="Chrome" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}">
                                <StackPanel Background="{TemplateBinding Background}">
                                    <Path x:Name="Icon" Data="{TemplateBinding IconData}" Width="{TemplateBinding IconWidth}"
                                            Height="{TemplateBinding IconHeight}" Fill="{TemplateBinding Foreground}" Stretch="Uniform"
                                            HorizontalAlignment="Center" VerticalAlignment="Center" />
                                    <ContentPresenter x:Name="Presenter" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </StackPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource ButtonTextDisabled}" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource ButtonBackgroundHover}" />
                                    <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderHover}" />
                                    <Setter Property="Foreground" Value="{DynamicResource ButtonTextHover}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource ButtonBackgroundPressed}" />
                                    <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderPressed}" />
                                    <Setter Property="Foreground" Value="{DynamicResource ButtonTextPressed}" />
                                </Trigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter TargetName="Chrome" Property="BorderBrush" Value="{DynamicResource Accent}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
            <Style TargetType="{x:Type controls:ButtonWithComboBox}" BasedOn="{StaticResource {x:Type controls:ButtonWithComboBox}}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Focusable" Value="False" />
            </Style>
        </Style.Resources>
    </Style>
    
    <Style x:Key="{x:Type ToolBarTray}" TargetType="{x:Type ToolBarTray}">
        <Setter Property="Background" Value="{DynamicResource WindowBackground}" />
    </Style>

    <!--<Style x:Key="{x:Type ToolBarTray}" TargetType="{x:Type ToolBarTray}">
        <Setter Property="Background" Value="{DynamicResource WindowBackground}" />
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect Opacity="0.4" Direction="0" ShadowDepth="0" BlurRadius="5" />
            </Setter.Value>
        </Setter>
    </Style>-->
</ResourceDictionary>